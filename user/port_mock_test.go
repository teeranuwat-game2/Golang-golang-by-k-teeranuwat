// Code generated by MockGen. DO NOT EDIT.
// Source: port.go
//
// Generated by this command:
//
//	mockgen -source=port.go -package=user -destination=port_mock_test.go
//

// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockgetUsername is a mock of getUsername interface.
type MockgetUsername struct {
	ctrl     *gomock.Controller
	recorder *MockgetUsernameMockRecorder
	isgomock struct{}
}

// MockgetUsernameMockRecorder is the mock recorder for MockgetUsername.
type MockgetUsernameMockRecorder struct {
	mock *MockgetUsername
}

// NewMockgetUsername creates a new mock instance.
func NewMockgetUsername(ctrl *gomock.Controller) *MockgetUsername {
	mock := &MockgetUsername{ctrl: ctrl}
	mock.recorder = &MockgetUsernameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetUsername) EXPECT() *MockgetUsernameMockRecorder {
	return m.recorder
}

// GetUsername mocks base method.
func (m *MockgetUsername) GetUsername(id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsername", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUsername indicates an expected call of GetUsername.
func (mr *MockgetUsernameMockRecorder) GetUsername(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsername", reflect.TypeOf((*MockgetUsername)(nil).GetUsername), id)
}
